import sqlite3
import json

ADMIN_ID = 5239  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

def is_admin(msg):
    return msg.from_user.id == ADMIN_ID

async def admin_panel(msg):
    if not is_admin(msg):
        await msg.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await msg.answer(
        "üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_balance ID –°–£–ú–ú–ê\n"
        "/remove_balance ID –°–£–ú–ú–ê\n"
        "/give_brainrot ID –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "/remove_brainrot ID –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "/set_chance –ò–≥—Ä–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –®–∞–Ω—Å\n"
        "/edit_message –ù–∞–∑–≤–∞–Ω–∏–µ –ù–æ–≤—ã–π_—Ç–µ–∫—Å—Ç"
    )

async def add_balance(msg):
    if not is_admin(msg): return
    _, uid, amount = msg.text.split()
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("UPDATE users SET balance=balance+? WHERE id=?", (int(amount), int(uid)))
    conn.commit()
    conn.close()
    await msg.answer("‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω.")

async def remove_balance(msg):
    if not is_admin(msg): return
    _, uid, amount = msg.text.split()
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("UPDATE users SET balance=balance-? WHERE id=?", (int(amount), int(uid)))
    conn.commit()
    conn.close()
    await msg.answer("‚úÖ –ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω.")

async def give_brainrot(msg):
    if not is_admin(msg): return
    _, uid, name = msg.text.split(maxsplit=2)
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO inventory (user_id, brainrot) VALUES (?, ?)", (int(uid), name))
    conn.commit()
    conn.close()
    await msg.answer(f"‚úÖ –í—ã–¥–∞–Ω –ë—Ä–µ–π–Ω—Ä–æ—Ç: {name}")

async def remove_brainrot(msg):
    if not is_admin(msg): return
    _, uid, name = msg.text.split(maxsplit=2)
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM inventory WHERE user_id=? AND brainrot=? LIMIT 1", (int(uid), name))
    conn.commit()
    conn.close()
    await msg.answer(f"‚úÖ –£–¥–∞–ª—ë–Ω –ë—Ä–µ–π–Ω—Ä–æ—Ç: {name}")

async def set_chance(msg):
    if not is_admin(msg): return
    _, game, key, value = msg.text.split()
    with open("config.json", "r") as f:
        config = json.load(f)
    config[game][key] = int(value)
    with open("config.json", "w") as f:
        json.dump(config, f, indent=2)
    await msg.answer(f"‚úÖ –®–∞–Ω—Å –≤ {game} –æ–±–Ω–æ–≤–ª—ë–Ω: {key} = {value}")

async def edit_message(msg):
    if not is_admin(msg): return
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3:
        await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /edit_message –ù–∞–∑–≤–∞–Ω–∏–µ –ù–æ–≤—ã–π_—Ç–µ–∫—Å—Ç")
        return
    _, key, new_text = parts
    with open("texts.json", "r", encoding="utf-8") as f:
        texts = json.load(f)
    texts[key] = new_text
    with open("texts.json", "w", encoding="utf-8") as f:
        json.dump(texts, f, indent=2, ensure_ascii=False)
    await msg.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ '{key}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
